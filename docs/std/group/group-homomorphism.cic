(import group "group.cic")
(import category "../category/index.cic")
(import equal-swap equal-map equal-compose "../equality/index.cic")

(define-class group-homomorphism ()
  :dom group
  :cod group

  :homo (-> (@dom:element) (@cod:element))

  :homo-preserve-id
  (equal @cod:element
         (@homo @dom:id)
         @cod:id)

  :homo-preserve-mul
  (forall ((x @dom:element)
           (y @dom:element))
    (equal (@cod:element)
           (@homo (@dom:mul x y))
           (@cod:mul (@homo x) (@homo y)))))

(claim id-group-homomorphism
  (forall ((G group))
    (group-homomorphism :dom G :cod G)))

(define (id-group-homomorphism (G group))
  (create group-homomorphism
    :dom G
    :cod G
    :homo (lambda (x) x)
    :homo-preserve-id refl
    :homo-preserve-mul (lambda (x y) refl)))

(claim compose-group-homomorphism
  (implicit ((G group)
             (H group)
             (K group))
    (forall ((f (group-homomorphism G H))
             (g (group-homomorphism H K)))
      (group-homomorphism G K))))

(define (compose-group-homomorphism
         (implicit G group)
         (implicit H group)
         (implicit H group)
         (f (group-homomorphism G H))
         (g (group-homomorphism H K)))
  (create group-homomorphism
    :dom G
    :cod K

    :homo (forall ((x G:element)) (g:homo (f:homo x)))

    :homo-preserve-id
    (equivalent
     :type K:element
     (g:homo (f:homo G:id))
     :by (equal-map g:homo f:homo-preserve-id)
     (g:homo H:id)
     :by g:homo-preserve-id
     K:id)

    :homo-preserve-mul
    (lambda (x y)
      (equivalent
       :type K:element
       (g:homo (f:homo (G:mul x y)))
       :by (equal-map g:homo (f:homo-preserve-mul x y))
       (g:homo (H:mul (f:homo x) (f:homo y)))
       :by (g:homo-preserve-mul (f:homo x) (f:homo y))
       (K:mul (g:homo (f:homo x)) (g:homo (f:homo y)))))))
