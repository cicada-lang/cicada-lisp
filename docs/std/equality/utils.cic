(claim equal-map
  (implicit ((x type)
             (y type)
             (from x)
             (to x))
    (forall ((f (-> x y))
             (target (equal x from to)))
      (equal y (f from) (f to)))))

(define (equal-map (implicit x y from to) f target)
  (replace target
    (lambda (x) (equal y (f from) (f x)))
    refl))


(claim equal-swap
  (implicit ((a type)
             (x a)
             (y a))
    (-> (equal a x y) (equal a y x))))

(define (equal-swap (implicit a x y) xy-equal)
  (replace xy-equal
    (lambda (w) (equal a w x))
    refl))


(claim equal-compose
  (implicit ((a type)
             (x a)
             (y a)
             (z a))
    (-> (equal a x y) (equal a y z)
        (equal a x z))))

(define (equal-compose (implicit a x y z) xy-equal yz-equal)
  (replace yz-equal
    (lambda (w) (equal a x w))
    xy-equal))
