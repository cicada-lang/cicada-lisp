function equalMap(
  implicit X: Type,
  implicit Y: Type,
  implicit from: X,
  implicit to: X,
  f: (X) -> Y,
  target: Equal(X, from, to),
): Equal(Y, f(from), f(to)) {
  return replace(
    target,
    (x) => Equal(Y, f(from), f(x)),
    refl,
  )
}

function equalSwap(
  implicit A: Type,
  implicit x: A,
  implicit y: A,
  xyEqual: Equal(A, x, y),
): Equal(A, y, x) {
  return replace(
    xyEqual,
    (w) => Equal(A, w, x),
    refl,
  )
}

function equalCompose(
  implicit A: Type,
  implicit x: A,
  implicit y: A,
  implicit z: A,
  xyEqual: Equal(A, x, y),
  yzEqual: Equal(A, y, z),
): Equal(A, x, z) {
  return replace(
    yzEqual,
    (w) => Equal(A, x, w),
    xyEqual,
  )
}
